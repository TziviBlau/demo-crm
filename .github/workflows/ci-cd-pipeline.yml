name: Demo CRM CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      if: ${{ secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Log in to GitHub Container Registry
      if: ${{ secrets.GHCR_TOKEN != '' }}
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Pull existing demo-crm image
      run: docker pull pwstaging/demo-crm:latest

    - name: Retag image
      run: |
        TAG=demo-crm:${{ github.run_number }}
        if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
          docker tag pwstaging/demo-crm:latest ${{ secrets.DOCKERHUB_USERNAME }}/$TAG
        else
          docker tag pwstaging/demo-crm:latest ghcr.io/${{ github.repository_owner }}/$TAG
        fi

    - name: Push retagged image
      run: |
        TAG=demo-crm:${{ github.run_number }}
        if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/$TAG
        else
          docker push ghcr.io/${{ github.repository_owner }}/$TAG
        fi

    - name: Set up kind (Kubernetes in Docker)
      uses: engineerd/setup-kind@v0.5.0

    - name: Create kind cluster
      run: kind create cluster

    - name: Deploy to kind cluster
      run: |
        kubectl apply -f k8s/deployment.yaml
        if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
          kubectl set image deployment/demo-crm demo-crm=${{ secrets.DOCKERHUB_USERNAME }}/demo-crm:${{ github.run_number }}
        else
          kubectl set image deployment/demo-crm demo-crm=ghcr.io/${{ github.repository_owner }}/demo-crm:${{ github.run_number }}
        fi

    - name: Wait for deployment rollout
      run: kubectl rollout status deployment/demo-crm --timeout=120s

    - name: Verify app is running
      run: |
        POD=$(kubectl get pods -l app=demo-crm -o jsonpath='{.items[0].metadata.name}')
        kubectl wait --for=condition=Ready pod/$POD --timeout=60s
        kubectl port-forward $POD 3000:3000 &
        sleep 10
        curl --fail http://localhost:3000 || exit 1

    - name: Clean up kind cluster
      if: always()
      run: kind delete cluster
